#! /usr/bin/env ruby

require 'pg'
require 'io/console'

class ExpenseData
  attr_reader :connection

  def initialize
    @connection = PG.connect(dbname: "expenses")
  end

  def list_expenses
    results = connection.exec("SELECT * FROM expenses ORDER BY created_on ASC")
    display_expenses(results)
  end

  def add_expense(amount, memo)
    date = Date.today
    sql = <<~UPDATE
    INSERT INTO expenses (amount, memo, created_on)
    VALUES ($1, $2, $3)
    UPDATE
    connection.exec_params(sql,[amount, memo, date])
  end

  def search_expense(query)
    sql = <<~SQL
    SELECT * FROM expenses
    WHERE memo ILIKE $1
    SQL
    results = connection.exec_params(sql, ["%#{query}%"])
    display_expenses(results)
  end

  def delete_expense(id)
    sql1 = <<~SQL
    SELECT * FROM expenses
    WHERE id  = $1
    SQL
    result1 = connection.exec_params(sql1, [id])
    abort "There is no expense with the id '#{id}'." unless result1.ntuples >= 1
    sql2 = <<~SQL
    DELETE FROM expenses
    WHERE id = $1
    SQL
    connection.exec_params(sql2, [id])
    puts "The following expense has been deleted:"
    display_expenses(result1)
  end

  def delete_all_expenses
    connection.exec("DELETE FROM expenses")
    puts "All expenses have been deleted."
  end

  private

  def display_expenses(expenses)
    display_count(expenses)
    expenses.each do |tuple|
      columns = [ tuple["id"].rjust(3),
                  tuple["created_on"].rjust(10),
                  tuple["amount"].rjust(12),
                  tuple["memo"]]
      puts columns.join(" | ")
    end
    display_total(expenses)
  end

  def display_count(expenses)
    if expenses.ntuples == 0
      puts "There are no expenses."
    elsif expenses.ntuples == 1
      puts "There is 1 expense"
    else
      puts "There are #{expenses.ntuples} expenses."
    end
  end

  def display_total(expenses)
    return if expenses.ntuples == 0
    puts "--------------------------------------------------"
    total = expenses.field_values("amount").map(&:to_f).sum
    puts "Total #{total.to_s.rjust(25)}"
  end
end

class CLI
  attr_reader :application

  def initialize
    @application = ExpenseData.new
  end

  def run(commands)
    command = commands.first
    case command
    when "add"
      amount = commands[1]
      memo = commands[2]
      abort "You must provide an amount and memo." unless amount && memo
      application.add_expense(amount, memo)
    when "delete"
      application.delete_expense(commands[1])
    when "list"
      application.list_expenses
    when "search"
      application.search_expense(commands[1])
    when "clear"
      puts "This will remove all expenses. Are you sure? (y/n)"
      answer = $stdin.getch
      application.delete_all_expenses if answer == "y"
    else
      display_help
    end
  end

  def valid_input?(input, valid_inputs)
    valid_inputs.include?(input.downcase)
  end

  def display_help
    puts <<~HELP
    An expense recording system

    Commands:

    add AMOUNT MEMO [DATE] - record a new expense
    clear - delete all expenses
    list - list all expenses
    delete NUMBER - remove expense with id NUMBER
    search QUERY - list expenses with a matching memo field
    HELP
  end
end

CLI.new.run(ARGV)
